package io.github.simplejdbcmapper.core;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.time.LocalDateTime;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import io.github.simplejdbcmapper.exception.MapperException;
import io.github.simplejdbcmapper.model.Customer;
import io.github.simplejdbcmapper.model.Order;
import io.github.simplejdbcmapper.model.Person;
import io.github.simplejdbcmapper.model.Product;

@SpringBootTest
@ExtendWith(SpringExtension.class)
class InsertTest {
	@Autowired
	private SimpleJdbcMapper sjm;

	private SimpleJdbcMapperSupport sjmSupport;

	@BeforeEach
	void beforeMethod() {
		// clear caches to force a table meta data lookup from database.
		sjmSupport = TestUtils.getSimpleJdbcMapperSupport(sjm);
	}

	@Test
	void insert_longAutoGeneratedId_Test() {
		Order order = new Order();
		order.setOrderDate(LocalDateTime.now());
		order.setCustomerId(2);

		sjm.insert(order);

		// check if auto assigned properties have been assigned
		if (sjmSupport.getRecordAuditedOnSupplier() != null) {
			assertNotNull(order.getCreatedOn());
			assertNotNull(order.getUpdatedOn());
		}
		if (sjmSupport.getRecordAuditedBySupplier() != null) {
			assertEquals("tester", order.getCreatedBy());
			assertEquals("tester", order.getUpdatedBy());
		}
		assertEquals(1, order.getVersion());

		// requery and test.
		order = sjm.findById(Order.class, order.getOrderId());
		assertNotNull(order.getOrderId());
		assertNotNull(order.getOrderDate());
		if (sjmSupport.getRecordAuditedOnSupplier() != null) {
			assertNotNull(order.getCreatedOn());
			assertNotNull(order.getUpdatedOn());
		}
		if (sjmSupport.getRecordAuditedBySupplier() != null) {
			assertEquals("tester", order.getCreatedBy());
			assertEquals("tester", order.getUpdatedBy());
		}
		assertEquals(1, order.getVersion());
	}

	@Test
	void insert_integerAutoGeneratedId_withNoVersionAndCreatedInfoTest() {

		Customer customer = new Customer();
		customer.setFirstName("aaa");
		customer.setLastName("bbb");

		sjm.insert(customer);

		Customer customer1 = sjm.findById(Customer.class, customer.getCustomerId());

		assertNotNull(customer1.getCustomerId());
		assertEquals("aaa", customer1.getFirstName());
		assertEquals("bbb", customer1.getLastName());
	}

	@Test
	void insert_withNonNullIdFailure_Test() {
		Order order = new Order();
		order.setOrderId(2002L);
		order.setOrderDate(LocalDateTime.now());
		order.setCustomerId(2);

		Exception exception = Assertions.assertThrows(MapperException.class, () -> {
			sjm.insert(order);
		});
		assertTrue(exception.getMessage()
				.contains("has to be null since this insert is for an object whose id is auto generated"));
	}

	@Test
	void insert_WithManualIntegerId_Test() {
		Product product = new Product();
		product.setProductId(1001);
		product.setName("hat");
		product.setCost(12.25);

		sjm.insert(product);

		// check if auto assigned properties are assigned.
		if (sjmSupport.getRecordAuditedBySupplier() != null) {
			assertEquals("tester", product.getCreatedBy());
			assertEquals("tester", product.getUpdatedBy());
		}
		if (sjmSupport.getRecordAuditedOnSupplier() != null) {
			assertNotNull(product.getCreatedOn());
			assertNotNull(product.getUpdatedOn());
		}
		assertEquals(1, product.getVersion());

		// requery and check
		product = sjm.findById(Product.class, 1001);
		assertNotNull(product.getProductId());
		assertEquals("hat", product.getName());
		assertEquals(12.25, product.getCost());
		if (sjmSupport.getRecordAuditedBySupplier() != null) {
			assertEquals("tester", product.getCreatedBy());
			assertEquals("tester", product.getUpdatedBy());
		}
		if (sjmSupport.getRecordAuditedOnSupplier() != null) {
			assertNotNull(product.getCreatedOn());
			assertNotNull(product.getUpdatedOn());
		}
		assertEquals(1, product.getVersion());

	}

	@Test
	void insert_withManualStringId_Test() {

		Person person = new Person();
		person.setPersonId("p1");

		person.setFirstName("xxx");
		person.setLastName("yyy");

		sjm.insert(person);

		Person person1 = sjm.findById(Person.class, person.getPersonId());

		assertNotNull(person1);
	}

	@Test
	void insert_nullObjectFailure_Test() {
		Exception exception = Assertions.assertThrows(IllegalArgumentException.class, () -> {
			sjm.insert(null);
		});
		assertTrue(exception.getMessage().contains("Object must not be null"));
	}

	@Test
	void insert_nonAutoGeneratedId_withNullIdFailure_Test() {
		Product product = new Product();
		product.setName("hat");
		product.setCost(12.25);

		Exception exception = Assertions.assertThrows(MapperException.class, () -> {
			sjm.insert(product);
		});

		assertTrue(exception.getMessage().contains("must not be null since it is not an auto generated id"));
	}
}
