package io.github.simplejdbcmapper.core;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.time.LocalDateTime;
import java.util.List;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import io.github.simplejdbcmapper.config.AppRecordOperatorResolver;
import io.github.simplejdbcmapper.exception.AnnotationException;
import io.github.simplejdbcmapper.exception.MapperException;
import io.github.simplejdbcmapper.exception.OptimisticLockingException;
import io.github.simplejdbcmapper.model.Customer;
import io.github.simplejdbcmapper.model.NoTableAnnotationModel;
import io.github.simplejdbcmapper.model.NonDefaultNamingProduct;
import io.github.simplejdbcmapper.model.Order;
import io.github.simplejdbcmapper.model.OrderInheritedAudit;
import io.github.simplejdbcmapper.model.Person;
import io.github.simplejdbcmapper.model.PersonView;
import io.github.simplejdbcmapper.model.PersonWithPrimitiveId;
import io.github.simplejdbcmapper.model.Product;
import io.github.simplejdbcmapper.model.ProductWithNoAuditFields;

@SpringBootTest
@ExtendWith(SpringExtension.class)
class SimpleJdbcMapperTest {

	@Value("${spring.datasource.driver-class-name}")
	private String jdbcDriver;

	@Autowired
	private SimpleJdbcMapper sjm;

	@Test
	void insert_longAutoGeneratedId_Test() {
		Order order = new Order();
		order.setOrderDate(LocalDateTime.now());
		order.setCustomerId(2);

		sjm.insert(order);

		// check if auto assigned properties have been assigned.
		assertNotNull(order.getCreatedOn());
		assertNotNull(order.getUpdatedOn());
		assertEquals(1, order.getVersion());
		assertEquals("tester", order.getCreatedBy());
		assertEquals("tester", order.getUpdatedBy());

		// requery and test.
		order = sjm.findById(Order.class, order.getOrderId());
		assertNotNull(order.getOrderId());
		assertNotNull(order.getOrderDate());
		assertNotNull(order.getCreatedOn());
		assertNotNull(order.getUpdatedOn());
		assertEquals(1, order.getVersion());
		assertEquals("tester", order.getCreatedBy());
		assertEquals("tester", order.getUpdatedBy());
	}

	@Test
	void insert_integerAutoGeneratedId_withNoVersionAndCreatedInfoTest() {

		Customer customer = new Customer();
		customer.setFirstName("aaa");
		customer.setLastName("bbb");

		sjm.insert(customer);

		Customer customer1 = sjm.findById(Customer.class, customer.getCustomerId());

		assertNotNull(customer1.getCustomerId());
		assertEquals("aaa", customer1.getFirstName());
		assertEquals("bbb", customer1.getLastName());
	}

	@Test
	void insert_withNonNullIdFailure_Test() {
		Order order = new Order();
		order.setOrderId(2002L);
		order.setOrderDate(LocalDateTime.now());
		order.setCustomerId(2);

		Exception exception = Assertions.assertThrows(MapperException.class, () -> {
			sjm.insert(order);
		});
		assertTrue(exception.getMessage()
				.contains("has to be null since this insert is for an object whose id is auto generated"));
	}

	@Test
	void insert_WithManualIntegerId_Test() {
		Product product = new Product();
		product.setProductId(1001);
		product.setName("hat");
		product.setCost(12.25);

		sjm.insert(product);

		// check if auto assigned properties are assigned.
		assertNotNull(product.getCreatedOn());
		assertNotNull(product.getUpdatedOn());
		assertEquals(1, product.getVersion());
		assertEquals("tester", product.getCreatedBy());
		assertEquals("tester", product.getUpdatedBy());

		// requery and check
		product = sjm.findById(Product.class, 1001);
		assertNotNull(product.getProductId());
		assertEquals("hat", product.getName());
		assertEquals(12.25, product.getCost());
		assertNotNull(product.getCreatedOn());
		assertNotNull(product.getUpdatedOn());
		assertEquals(1, product.getVersion());
		assertEquals("tester", product.getCreatedBy());
		assertEquals("tester", product.getUpdatedBy());
	}

	@Test
	void insert_withManualStringId_Test() {

		Person person = new Person();
		person.setPersonId("p1");

		person.setFirstName("xxx");
		person.setLastName("yyy");

		sjm.insert(person);

		Person person1 = sjm.findById(Person.class, person.getPersonId());

		assertNotNull(person1);
	}

	@Test
	void insert_nullObjectFailure_Test() {
		Exception exception = Assertions.assertThrows(IllegalArgumentException.class, () -> {
			sjm.insert(null);
		});
		assertTrue(exception.getMessage().contains("Object must not be null"));
	}

	@Test
	void insert_nonAutoGeneratedId_withNullIdFailure_Test() {
		Product product = new Product();
		product.setName("hat");
		product.setCost(12.25);

		Exception exception = Assertions.assertThrows(MapperException.class, () -> {
			sjm.insert(product);
		});

		assertTrue(exception.getMessage().contains("must not be null since it is not an auto generated id"));
	}

	@Test
	void update_Test() throws Exception {
		Order order = sjm.findById(Order.class, 1);
		LocalDateTime prevUpdatedOn = order.getUpdatedOn();

		Thread.sleep(1000); // provide interval so timestamps end up different

		order.setStatus("COMPLETE");
		sjm.update(order);

		// check if auto assigned properties have changed.
		assertEquals(2, order.getVersion());
		assertTrue(order.getUpdatedOn().isAfter(prevUpdatedOn));
		assertEquals("tester", order.getUpdatedBy());

		// requery and check
		order = sjm.findById(Order.class, 1);
		assertEquals("COMPLETE", order.getStatus());
		assertEquals(2, order.getVersion()); // version incremented
		assertTrue(order.getUpdatedOn().isAfter(prevUpdatedOn));
		assertEquals("tester", order.getUpdatedBy());

		// reset status for later tests to work. Refactor
		order.setStatus("IN PROCESS");
		sjm.update(order);
	}

	@Test
	void update_withIdOfTypeInteger_Test() {
		Product product = sjm.findById(Product.class, 6);
		Product product1 = sjm.findById(Product.class, 6);
		product1.setName("xyz");
		sjm.update(product1);

		Product product2 = sjm.findById(Product.class, 6);

		assertEquals("xyz", product1.getName());
		assertTrue(product2.getVersion() > product.getVersion()); // version incremented
	}

	@Test
	void update_withIdOfTypeString_Test() {
		Person person = sjm.findById(Person.class, "person101");
		person.setLastName("new name");
		sjm.update(person);

		Person person1 = sjm.findById(Person.class, "person101");

		assertEquals("new name", person1.getLastName());
	}

	@Test
	void update_withIdAutoGeneratedFailure_Test() {
		// id is int. insert should fail.
		PersonWithPrimitiveId person = new PersonWithPrimitiveId();
		person.setLastName("john");
		person.setFirstName("doe");

		Exception exception = Assertions.assertThrows(AnnotationException.class, () -> {
			sjm.insert(person);
		});

		assertTrue(exception.getMessage().contains("is auto generated and it cannot be a primitive type"));
	}

	@Test
	void update_throwsOptimisticLockingException_Test() {
		Order order = sjm.findById(Order.class, 2);
		order.setVersion(order.getVersion() - 1);
		Assertions.assertThrows(OptimisticLockingException.class, () -> {
			sjm.update(order);
		});
	}

	@Test
	void update_withNullVersion_Test() {
		Order order = sjm.findById(Order.class, 2);
		order.setVersion(null);
		Exception exception = Assertions.assertThrows(MapperException.class, () -> {
			sjm.update(order);
		});

		assertTrue(exception.getMessage().contains("must not be null when updating"));

	}

	@Test
	void update_nullObjectFailure_Test() {
		Exception exception = Assertions.assertThrows(IllegalArgumentException.class, () -> {
			sjm.update(null);
		});
		assertTrue(exception.getMessage().contains("Object must not be null"));
	}

	@Test
	void update_nullIdFailure_Test() {
		Customer customer = sjm.findById(Customer.class, 1);
		customer.setCustomerId(null);
		Exception exception = Assertions.assertThrows(IllegalArgumentException.class, () -> {
			sjm.update(customer);
		});
		assertTrue(exception.getMessage().contains("is the id and must not be null"));
	}

	@Test
	void update_nonDatabaseProperty_Test() {
		Person person = sjm.findById(Person.class, "person101");
		person.setSomeNonDatabaseProperty("xyz");
		sjm.update(person);

		// requery
		Person person2 = sjm.findById(Person.class, "person101");

		assertNotNull(person2);
		assertNull(person2.getSomeNonDatabaseProperty());
	}

	@Test
	void updatePProperties_IdAndAutoAssign_failure() {
		Order order = sjm.findById(Order.class, 1);

		Exception exception = Assertions.assertThrows(MapperException.class, () -> {
			sjm.updateSpecificProperties(order, "orderId");
		});
		assertTrue(exception.getMessage().contains("cannot be updated"));

		exception = Assertions.assertThrows(MapperException.class, () -> {
			sjm.updateSpecificProperties(order, "createdOn"); // @CreatedOn auto assign
		});
		assertTrue(exception.getMessage().contains("cannot be updated"));

		exception = Assertions.assertThrows(MapperException.class, () -> {
			sjm.updateSpecificProperties(order, "createdBy"); // @CreatedBy auto assign
		});
		assertTrue(exception.getMessage().contains("cannot be updated"));

		exception = Assertions.assertThrows(MapperException.class, () -> {
			sjm.updateSpecificProperties(order, "updatedOn"); // @UpdatedOn auto assign
		});
		assertTrue(exception.getMessage().contains("cannot be updated"));

		exception = Assertions.assertThrows(MapperException.class, () -> {
			sjm.updateSpecificProperties(order, "updatedBy"); // @UpdatedBy auto assign
		});
		assertTrue(exception.getMessage().contains("cannot be updated"));

		exception = Assertions.assertThrows(MapperException.class, () -> {
			sjm.updateSpecificProperties(order, "version"); // @Version auto assign
		});
		assertTrue(exception.getMessage().contains("cannot be updated"));

	}

	@Test
	void updateProperties_invalidProperty_failure() {
		Order order = sjm.findById(Order.class, 1);
		Exception exception = Assertions.assertThrows(MapperException.class, () -> {
			sjm.updateSpecificProperties(order, "xyz");
		});
		assertTrue(exception.getMessage().contains("No mapping found for property"));

		exception = Assertions.assertThrows(MapperException.class, () -> {
			sjm.updateSpecificProperties(order, "status", null);
		});
		assertTrue(exception.getMessage().contains("No mapping found for property"));

	}

	@Test
	void updateProperties_success() throws Exception {
		Customer customer = sjm.findById(Customer.class, 5);

		customer.setLastName("bbb");
		customer.setFirstName("aaa");
		sjm.updateSpecificProperties(customer, "lastName", "firstName");

		customer = sjm.findById(Customer.class, customer.getCustomerId());
		assertEquals("bbb", customer.getLastName());
		assertEquals("aaa", customer.getFirstName());

		Order order = new Order();
		order.setStatus("PENDING");
		sjm.insert(order);

		LocalDateTime prevUpdatedOn = order.getUpdatedOn();

		Thread.sleep(1000); // avoid timing issue.

		order.setStatus("DONE");
		sjm.updateSpecificProperties(order, "status");

		assertEquals("DONE", order.getStatus());
		// check if auto assigned properties have changed.
		assertEquals(2, order.getVersion());
		assertTrue(order.getUpdatedOn().isAfter(prevUpdatedOn));
		assertEquals("tester", order.getUpdatedBy());

		sjm.delete(order);

	}

	@Test
	void updateProperties_propertiesCountLargerThanCacheableSize_success() {
		ProductWithNoAuditFields product = new ProductWithNoAuditFields();
		product.setProductId(801);
		product.setName("p-801");
		product.setCost(4.75);
		sjm.insert(product);

		// number of properties larger than ACHEABLE_UPDATE_PROPERTIES_COUNT = 3. Just
		// want to make sure
		// it works.
		product.setVersion(1);
		product.setCreatedOn(LocalDateTime.now());
		sjm.updateSpecificProperties(product, "cost", "name", "version", "createdOn");

		ProductWithNoAuditFields productWithNoAuditFields = sjm.findById(ProductWithNoAuditFields.class,
				product.getProductId());
		assertEquals(1, productWithNoAuditFields.getVersion());
		assertNotNull(productWithNoAuditFields.getCreatedOn());

		sjm.delete(product);
	}

	@Test
	void findById_Test() {
		Order order = sjm.findById(Order.class, 1);

		assertNotNull(order.getOrderId());
		assertNotNull(order.getOrderDate());
		assertNotNull(order.getCreatedBy());
		assertNotNull(order.getCreatedOn());
		assertNotNull(order.getUpdatedBy());
		assertNotNull(order.getUpdatedOn());
		assertNotNull(order.getVersion());
	}

	@Test
	void findById_idNull_Test() {
		Order order = sjm.findById(Order.class, null);

		assertNull(order);
	}

	@Test
	void findById_databaseView_Test() {
		PersonView pv = sjm.findById(PersonView.class, "person101");

		assertNotNull(pv.getPersonId());
		assertNotNull(pv.getFirstName());
		assertNotNull(pv.getLastName());
	}

	@Test
	void findAll_Test() {
		List<Order> orders = sjm.findAll(Order.class);
		assertTrue(orders.size() >= 2);

		for (int idx = 0; idx < orders.size(); idx++) {
			assertNotNull(orders.get(idx).getOrderId());
			assertNotNull(orders.get(idx).getOrderDate());
			assertNotNull(orders.get(idx).getCreatedBy());
			assertNotNull(orders.get(idx).getCreatedOn());
			assertNotNull(orders.get(idx).getUpdatedBy());
			assertNotNull(orders.get(idx).getUpdatedOn());
			assertNotNull(orders.get(idx).getVersion());
		}
	}

	@Test
	void deleteByObject_Test() {
		Product product = sjm.findById(Product.class, 4);
		int cnt = sjm.delete(product);
		assertEquals(1, cnt);

		Product product1 = sjm.findById(Product.class, 4);
		assertNull(product1);
	}

	@Test
	void delete_nullObjectFailure_Test() {
		Exception exception = Assertions.assertThrows(IllegalArgumentException.class, () -> {
			sjm.delete(null);
		});
		assertTrue(exception.getMessage().contains("Object must not be null"));
	}

	@Test
	void deleteById_Test() {
		int cnt = sjm.deleteById(Product.class, 5);
		assertEquals(1, cnt);

		Product product1 = sjm.findById(Product.class, 5);
		assertNull(product1);
	}

	@Test
	void deleteById_nullIdFailure_Test() {
		Exception exception = Assertions.assertThrows(IllegalArgumentException.class, () -> {
			sjm.deleteById(Product.class, null);
		});
		assertTrue(exception.getMessage().contains("id must not be null"));
	}

	@Test
	void loadMapping_success_Test() {
		Assertions.assertDoesNotThrow(() -> {
			sjm.loadMapping(Order.class);
		});
	}

	@Test
	void loadMapping_failure_Test() {
		Assertions.assertThrows(AnnotationException.class, () -> {
			sjm.loadMapping(NoTableAnnotationModel.class);
		});
	}

	@Test
	void annotationOrderInheritedAudit_Test() {

		OrderInheritedAudit obj = new OrderInheritedAudit();
		obj.setOrderDate(LocalDateTime.now());
		obj.setCustomerId(2);

		sjm.insert(obj);

		// check if auto assigned properties have been assigned.
		assertNotNull(obj.getCreatedOn());
		assertNotNull(obj.getUpdatedOn());
		assertEquals(1, obj.getVersion());
		assertEquals("tester", obj.getCreatedBy());
		assertEquals("tester", obj.getUpdatedBy());

		OrderInheritedAudit obj2 = sjm.findById(OrderInheritedAudit.class, obj.getOrderId());
		assertNotNull(obj2.getOrderId());
		assertNotNull(obj2.getOrderDate());
		assertNotNull(obj2.getCreatedOn());
		assertNotNull(obj2.getUpdatedOn());
		assertEquals(1, obj2.getVersion());
		assertEquals("tester", obj2.getCreatedBy());
		assertEquals("tester", obj2.getUpdatedBy());

	}

	@Test
	void getBeanFriendlySqlColumns_test() {

		NonDefaultNamingProduct p = new NonDefaultNamingProduct();
		p.setId(9812);
		p.setProductName("test");
		p.setCost(10.25);
		sjm.insert(p);

		String sql = "SELECT " + sjm.getBeanFriendlySqlColumns(NonDefaultNamingProduct.class)
				+ " FROM product WHERE name = ?";

		// Using JdbcClient api for the above sql
		List<NonDefaultNamingProduct> products = sjm.getJdbcClient().sql(sql).param("test")
				.query(NonDefaultNamingProduct.class).list();

		assertEquals(1, products.size());
		assertEquals(10.25, products.get(0).getCost());
		assertEquals("test", products.get(0).getProductName());

		// Using JdbcTemplate api for the above sql
		List<NonDefaultNamingProduct> products2 = sjm.getJdbcTemplate().query(sql,
				BeanPropertyRowMapper.newInstance(NonDefaultNamingProduct.class), "test");

		assertEquals(1, products2.size());
		assertEquals(10.25, products2.get(0).getCost());
		assertEquals("test", products2.get(0).getProductName());
	}

	@Test
	void setRecordOperatorResolver_resetting_failure() {
		var obj = new AppRecordOperatorResolver();
		Assertions.assertThrows(IllegalStateException.class, () -> {
			sjm.setRecordOperatorResolver(obj);
		});
	}

}
